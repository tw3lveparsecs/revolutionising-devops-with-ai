name: Deploy Azure Infrastructure

on:
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: "Azure Resource Group Name"
        required: true
        default: "star-wars-collectibles-rg"
      location:
        description: "Azure Region Location"
        required: true
        default: "australiaeast"
      baseName:
        description: "Base name for resources"
        required: true
        default: "star-wars-collectibles"
      staticWebAppLocation:
        description: "Static Web App Location (can be different from main location)"
        required: false
        default: "eastasia"

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    name: Deploy Azure Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: gh auth login
        shell: bash
        run: gh auth login --with-token <<< ${{ secrets.REPO_GITHUB_TOKEN }}

      - name: gh set secret
        shell: bash
        run: echo "SECRET_VALUE" | gh secret set MONGODB_CONNECTION_STRING

      # - name: Azure Login
      #   uses: azure/login@v1
      #   with:
      #     client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Create Resource Group if not exists
      #   run: |
      #     az group create --name ${{ github.event.inputs.resourceGroupName }} --location ${{ github.event.inputs.location }} --output none

      # - name: Deploy Bicep Template
      #   id: deploy
      #   uses: azure/arm-deploy@v1
      #   with:
      #     resourceGroupName: ${{ github.event.inputs.resourceGroupName }}
      #     template: ./azure-infrastructure.bicep
      #     parameters: >
      #       baseName=${{ github.event.inputs.baseName }}
      #       location=${{ github.event.inputs.location }}
      #       staticWebAppLocation=${{ github.event.inputs.staticWebAppLocation || github.event.inputs.location }}

      # - name: Get CosmosDB Account Name
      #   run: |
      #     COSMOS_ACCOUNT_NAME=$(echo "${{ steps.deploy.outputs.cosmosAccountName }}" | tr -d '"')
      #     echo "COSMOS_ACCOUNT_NAME=$COSMOS_ACCOUNT_NAME" >> $GITHUB_ENV

      # - name: Create and Store MongoDB Connection String as Secret
      #   uses: azure/cli@v1
      #   with:
      #     azcliversion: latest
      #     inlineScript: |
      #       # Get CosmosDB primary key securely using Azure CLI
      #       COSMOS_PRIMARY_KEY=$(az cosmosdb keys list --name ${{ env.COSMOS_ACCOUNT_NAME }} \
      #         --resource-group ${{ github.event.inputs.resourceGroupName }} \
      #         --query primaryMasterKey -o tsv)

      #       # Construct MongoDB connection string
      #       MONGODB_CONNECTION_STRING="mongodb://${{ env.COSMOS_ACCOUNT_NAME }}:${COSMOS_PRIMARY_KEY}@${{ env.COSMOS_ACCOUNT_NAME }}.mongo.cosmos.azure.com:10255/?ssl=true&replicaSet=globaldb&retrywrites=false&maxIdleTimeMS=120000&appName=@${{ env.COSMOS_ACCOUNT_NAME }}@"

      #       # Do not output connection string to logs but store it in GitHub env
      #       echo "::add-mask::$MONGODB_CONNECTION_STRING"
      #       echo "MONGODB_CONNECTION_STRING=$MONGODB_CONNECTION_STRING" >> $GITHUB_ENV

      #       # Set MongoDB connection string as a GitHub secret
      #       if [ -n "${{ secrets.REPO_GITHUB_TOKEN }}" ]; then
      #         echo "Setting MONGODB_CONNECTION_STRING as a repository secret"
      #         # Using echo to pipe the secret value avoids showing it in logs
      #         echo "$MONGODB_CONNECTION_STRING" | gh secret set MONGODB_CONNECTION_STRING
      #       else
      #         echo "REPO_GITHUB_TOKEN not found. Please manually set the MONGODB_CONNECTION_STRING as a repository secret."
      #       fi
      #   env:
      #     GH_TOKEN: ${{ secrets.REPO_GITHUB_TOKEN }}

      # - name: Get Static Web App Deployment Token
      #   uses: azure/cli@v1
      #   with:
      #     azcliversion: latest
      #     inlineScript: |
      #       STATIC_WEB_APP_NAME="${{ steps.deploy.outputs.staticWebAppName }}"
      #       STATIC_WEB_APP_DEPLOY_TOKEN=$(az staticwebapp secrets list \
      #         --name $STATIC_WEB_APP_NAME \
      #         --query 'properties.apiKey' \
      #         --output tsv)

      #       # Mask the token so it doesn't appear in logs
      #       echo "::add-mask::$STATIC_WEB_APP_DEPLOY_TOKEN"
      #       echo "STATIC_WEB_APP_DEPLOY_TOKEN=$STATIC_WEB_APP_DEPLOY_TOKEN" >> $GITHUB_ENV

      #       # Set Static Web App deployment token as a GitHub secret
      #       if [ -n "${{ secrets.REPO_GITHUB_TOKEN }}" ]; then
      #         echo "Setting STATIC_WEB_APP_DEPLOY_TOKEN as a repository secret"
      #         echo "$STATIC_WEB_APP_DEPLOY_TOKEN" | gh secret set STATIC_WEB_APP_DEPLOY_TOKEN
      #       else
      #         echo "REPO_GITHUB_TOKEN not found. Please manually set the STATIC_WEB_APP_DEPLOY_TOKEN as a repository secret."
      #       fi
      #   env:
      #     GH_TOKEN: ${{ secrets.REPO_GITHUB_TOKEN }}

      # - name: Output Resource Information
      #   run: |
      #     echo "üéâ Azure Resources Deployed Successfully!"
      #     echo ""
      #     echo "Resource Group: ${{ github.event.inputs.resourceGroupName }}"
      #     echo "Base Name: ${{ github.event.inputs.baseName }}"
      #     echo "Region: ${{ github.event.inputs.location }}"
      #     echo "Static Web App Region: ${{ github.event.inputs.staticWebAppLocation || github.event.inputs.location }}"
      #     echo ""
      #     echo "üåê App Service URL: ${{ steps.deploy.outputs.appServiceUrl }}"
      #     echo "üñ•Ô∏è Static Web App URL: ${{ steps.deploy.outputs.staticWebAppUrl }}"
      #     echo ""
      #     echo "Application secrets have been stored in GitHub repository secrets:"
      #     echo "- MONGODB_CONNECTION_STRING"
      #     echo "- STATIC_WEB_APP_DEPLOY_TOKEN"
