name: Deploy Bicep with PSRule Validation

on:
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: "Azure Resource Group Name"
        required: true
        default: "ps-rule-rg"
      location:
        description: "Azure Region Location"
        required: true
        default: "australiaeast"
      baseName:
        description: "Base name for resources"
        required: true
        default: "ps-rule"
      staticWebAppLocation:
        description: "Static Web App Location (can be different from main location)"
        required: false
        default: "eastasia"
      appServicePlanSku:
        description: "App Service Plan SKU"
        required: false
        default: "P1V2"
      uploadSarif:
        description: "Upload SARIF results to GitHub (requires GitHub Advanced Security)"
        type: boolean
        required: false
        default: false

# Reduced permissions if not uploading SARIF results
permissions:
  id-token: write
  contents: read
  # security-events: write # Only needed if uploadSarif is true

jobs:
  validate:
    name: Validate Bicep with PSRule
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Export Bicep Template for PSRule Analysis
        shell: pwsh
        run: |
          az bicep install
          mkdir -p out/templates
          az bicep build --file azure-infrastructure.bicep --outfile out/templates/azure-infrastructure.json

      - name: Run PSRule for Azure with detailed output
        id: psrule
        uses: microsoft/ps-rule@v2.9.0
        with:
          modules: "PSRule.Rules.Azure"
          inputPath: out/templates/azure-infrastructure.json
          outputFormat: Sarif
          outputPath: reports/ps-rule-results.sarif

      # Capture the PSRule console output to a file
      - name: Capture PSRule Console Output and Extract Summary
        if: always()
        shell: pwsh
        run: |
          # Retrieve and examine the PSRule output
          $env:PSRULE_OUTPUT_PATH = "reports"
          $env:PSRULE_OUTPUT_NAME = "ps-rule-results"

          # Run PSRule cmdlet again to capture the output directly
          Import-Module -Name PSRule.Rules.Azure
          $results = Get-AzRuleTemplateLink -Path out/templates/azure-infrastructure.json | Assert-PSRule -Module PSRule.Rules.Azure -As Summary

          # Write summary to a file
          $summary = "Rules processed: $($results.Total), failed: $($results.Failed), errored: $($results.Error)"
          Write-Output "Summary: $summary"

          # Create directory if it doesn't exist
          if (-not (Test-Path -Path reports)) {
            New-Item -Path reports -ItemType Directory -Force | Out-Null
          }

          # Save summary to file
          $summary | Set-Content -Path "reports/ps-rule-summary.txt"

          # Set environment variables for next steps
          echo "PROCESSED_RULES=$($results.Total)" >> $env:GITHUB_ENV
          echo "FAILED_RULES=$($results.Failed)" >> $env:GITHUB_ENV
          echo "ERRORED_RULES=$($results.Error)" >> $env:GITHUB_ENV
          echo "PASSED_RULES=$($results.Passed)" >> $env:GITHUB_ENV

          # Create job summary
          $summaryContent = @"
          ## PSRule Validation Summary

          üìä **$summary**

          | Metric | Count | Status |
          | ------ | ----- | ------ |
          | ‚úÖ Passed | $($results.Passed) | $(if ($results.Failed -eq 0 -and $results.Error -eq 0) { "‚úì All rules passed!" } else { "" }) |
          | ‚ùå Failed | $($results.Failed) | $(if ($results.Failed -gt 0) { "‚ö†Ô∏è Action required" } else { "" }) |
          | ‚ö†Ô∏è Errored | $($results.Error) | $(if ($results.Error -gt 0) { "‚ö†Ô∏è Action required" } else { "" }) |
          | üîÑ Total | $($results.Total) | |
          "@

          $summaryContent | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
          Write-Output "Job summary created successfully"

      # Optional: Upload results as SARIF - only runs if uploadSarif is true
      - name: Upload SARIF report
        if: ${{ github.event.inputs.uploadSarif == 'true' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/ps-rule-results.sarif
          category: PSRule
        continue-on-error: true
