name: Deploy Bicep with PSRule Validation

on:
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: "Azure Resource Group Name"
        required: true
        default: "ps-rule-rg"
      location:
        description: "Azure Region Location"
        required: true
        default: "australiaeast"
      baseName:
        description: "Base name for resources"
        required: true
        default: "ps-rule"
      staticWebAppLocation:
        description: "Static Web App Location (can be different from main location)"
        required: false
        default: "eastasia"
      appServicePlanSku:
        description: "App Service Plan SKU"
        required: false
        default: "P1V2"
      uploadSarif:
        description: "Upload SARIF results to GitHub (requires GitHub Advanced Security)"
        type: boolean
        required: false
        default: false

# Reduced permissions if not uploading SARIF results
permissions:
  id-token: write
  contents: read
  # security-events: write # Only needed if uploadSarif is true

jobs:
  validate:
    name: Validate Bicep with PSRule
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Export Bicep Template for PSRule Analysis
        shell: pwsh
        run: |
          az bicep install
          mkdir -p out/templates
          az bicep build --file azure-infrastructure.bicep --outfile out/templates/azure-infrastructure.json

      # Use PSRule GitHub Action from marketplace with latest version
      - name: Run PSRule for Azure with detailed output
        uses: microsoft/ps-rule@v2.9.0
        with:
          modules: "PSRule.Rules.Azure"
          inputPath: out/templates/azure-infrastructure.json
          outputFormat: Sarif
          outputPath: reports/ps-rule-results.sarif

      # Explicit run with full results output for accurate summary
      - name: Get Full PSRule Analysis Results
        id: psrule-detailed
        shell: pwsh
        run: |
          # Install required modules
          Install-Module -Name PSRule.Rules.Azure -Repository PSGallery -Force

          # Set environment variable to suppress warnings
          $env:PSRULE_AZURE_RESOURCE_MODULE_NOWARN = 'true'

          # Run analysis with error handling
          try {
            Write-Host "Running PSRule analysis..."
            $results = @(Invoke-PSRule -Module PSRule.Rules.Azure -InputPath out/templates/azure-infrastructure.json -Format Json -As Detail -ErrorAction Stop)

            Write-Host "Analysis completed with $($results.Count) results"

            # Initialize counters
            $passed = 0
            $failed = 0
            $total = $results.Count

            # Count results safely
            if ($results.Count -gt 0) {
                $passed = ($results | Where-Object { $_.Outcome -eq 'Pass' }).Count
                $failed = ($results | Where-Object { $_.Outcome -eq 'Fail' }).Count
            } else {
                Write-Host "No results returned from PSRule analysis"
            }

            # Write totals to environment variables
            echo "TOTAL_RULES=$total" >> $GITHUB_ENV
            echo "PASSED_RULES=$passed" >> $GITHUB_ENV
            echo "FAILED_RULES=$failed" >> $GITHUB_ENV

            # Create detailed output of failed rules
            $failedRules = @($results | Where-Object { $_.Outcome -eq 'Fail' })

            if ($failedRules.Count -gt 0) {
                Write-Host "Found $($failedRules.Count) failed rules"
                foreach ($rule in $failedRules) {
                    Write-Host "FAILED: $($rule.RuleName) - $($rule.TargetName)"
                    Write-Host "  Reason: $($rule.Reason)"
                    Write-Host "  Recommendation: $($rule.Recommendation)"
                    Write-Host "-----------------------------------------"
                }
            } else {
                Write-Host "No failed rules found"
            }

            # Create markdown summary
            Write-Output "## PSRule for Azure Analysis Summary" >> $GITHUB_STEP_SUMMARY
            Write-Output "" >> $GITHUB_STEP_SUMMARY
            Write-Output "| Category | Count |" >> $GITHUB_STEP_SUMMARY
            Write-Output "| -------- | ----- |" >> $GITHUB_STEP_SUMMARY
            Write-Output "| ‚úÖ Passed | $passed |" >> $GITHUB_STEP_SUMMARY
            Write-Output "| ‚ùå Failed | $failed |" >> $GITHUB_STEP_SUMMARY
            Write-Output "| üîÑ Total Evaluated | $total |" >> $GITHUB_STEP_SUMMARY

            if ($failed -gt 0 -and $failedRules.Count -gt 0) {
                Write-Output "" >> $GITHUB_STEP_SUMMARY
                Write-Output "### Failed Rules" >> $GITHUB_STEP_SUMMARY
                Write-Output "" >> $GITHUB_STEP_SUMMARY
                Write-Output "| Rule | Target | Recommendation |" >> $GITHUB_STEP_SUMMARY
                Write-Output "| ---- | ------ | -------------- |" >> $GITHUB_STEP_SUMMARY

                foreach ($rule in $failedRules) {
                    $recommendation = if ($rule.Recommendation) { $rule.Recommendation } else { "Follow Azure best practices" }
                    $targetName = if ($rule.TargetName) { $rule.TargetName } else { "Bicep Template" }
                    Write-Output "| $($rule.RuleName) | $targetName | $recommendation |" >> $GITHUB_STEP_SUMMARY
                }
            }
          }
          catch {
            Write-Host "::error::PSRule analysis failed: $_"
            Write-Host $_.ScriptStackTrace
            echo "TOTAL_RULES=0" >> $GITHUB_ENV
            echo "PASSED_RULES=0" >> $GITHUB_ENV
            echo "FAILED_RULES=0" >> $GITHUB_ENV

            # Create error summary
            Write-Output "## ‚ö†Ô∏è PSRule Analysis Failed" >> $GITHUB_STEP_SUMMARY
            Write-Output "" >> $GITHUB_STEP_SUMMARY
            Write-Output "Error details: $_" >> $GITHUB_STEP_SUMMARY
          }

      # Optional: Upload results as SARIF - only runs if uploadSarif is true
      - name: Upload SARIF report
        if: ${{ github.event.inputs.uploadSarif == 'true' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/ps-rule-results.sarif
          category: PSRule
        continue-on-error: true

      # Add a summary message about the validation
      - name: Validation Summary
        run: |
          echo "::group::PSRule Analysis Summary"
          echo "üîç PSRule for Azure validation completed"
          echo "‚úÖ Passed: ${{ env.PASSED_RULES }} rules"
          echo "‚ùå Failed: ${{ env.FAILED_RULES }} rules"
          echo "üîÑ Total: ${{ env.TOTAL_RULES }} rules evaluated"

          if [ "${{ env.FAILED_RULES }}" -gt "0" ]; then
            echo "::warning ::${{ env.FAILED_RULES }} rules failed validation. See detailed report for recommendations."
            echo "Failed rules are visible in the job summary and detailed logs above."
          else
            echo "‚úì All rules passed! Your Azure resources follow best practices."
          fi
          echo "::endgroup::"

  deploy:
    name: Deploy Bicep Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    environment:
      name: production
    steps:
      - name: Wait for Approval (5 minutes)
        run: |
          echo "‚è±Ô∏è Waiting for 5 minutes to allow time for manual approval before proceeding..."
          echo "Deployment to PRODUCTION environment will begin at $(date -d '+5 minutes')"
          sleep 300
          echo "‚úÖ Wait period completed. Proceeding with deployment..."

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group if it doesn't exist
        run: |
          az group create \
            --name ${{ github.event.inputs.resourceGroupName || 'revolutionising-devops-rg' }} \
            --location ${{ github.event.inputs.location || 'eastus' }} \
            --output none

      - name: Deploy Bicep template
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ github.event.inputs.resourceGroupName || 'revolutionising-devops-rg' }}
          template: azure-infrastructure.bicep
          parameters: >
            baseName=${{ github.event.inputs.baseName || 'revolutionising-devops' }}
            location=${{ github.event.inputs.location || 'eastus' }}

      - name: Show Deployment Outputs
        run: |
          echo "üöÄ Deployment Completed Successfully!"
          echo ""
          echo "üìù Output Values:"
          echo "App Service URL: ${{ steps.deploy.outputs.appServiceUrl }}"
          echo "Static Web App URL: ${{ steps.deploy.outputs.staticWebAppUrl }}"
          echo "Cosmos DB Account Name: ${{ steps.deploy.outputs.cosmosAccountName }}"
          echo "App Service Name: ${{ steps.deploy.outputs.appServiceName }}"
          echo "Static Web App Name: ${{ steps.deploy.outputs.staticWebAppName }}"
