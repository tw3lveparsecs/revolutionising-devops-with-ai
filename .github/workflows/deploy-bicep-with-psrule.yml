name: Deploy Bicep with PSRule Validation

on:
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: "Azure Resource Group Name"
        required: true
        default: "ps-rule-rg"
      location:
        description: "Azure Region Location"
        required: true
        default: "australiaeast"
      baseName:
        description: "Base name for resources"
        required: true
        default: "ps-rule"
      staticWebAppLocation:
        description: "Static Web App Location (can be different from main location)"
        required: false
        default: "eastasia"
      appServicePlanSku:
        description: "App Service Plan SKU"
        required: false
        default: "P1V2"
      uploadSarif:
        description: "Upload SARIF results to GitHub (requires GitHub Advanced Security)"
        type: boolean
        required: false
        default: false

# Reduced permissions if not uploading SARIF results
permissions:
  id-token: write
  contents: read
  # security-events: write # Only needed if uploadSarif is true

jobs:
  validate:
    name: Validate Bicep with PSRule
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Export Bicep Template for PSRule Analysis
        shell: pwsh
        run: |
          az bicep install
          mkdir -p out/templates
          az bicep build --file azure-infrastructure.bicep --outfile out/templates/azure-infrastructure.json

      # Use PSRule GitHub Action from marketplace with latest version
      - name: Run PSRule for Azure with detailed output
        uses: microsoft/ps-rule@v2.9.0
        with:
          modules: "PSRule.Rules.Azure"
          inputPath: out/templates/azure-infrastructure.json
          outputFormat: Sarif
          outputPath: reports/ps-rule-results.sarif

      - name: Create Detailed Job Summary
        shell: pwsh
        run: |
          $sarifContent = Get-Content -Path reports/ps-rule-results.sarif -Raw | ConvertFrom-Json
          $results = $sarifContent.runs[0].results
          $rules = $sarifContent.runs[0].tool.driver.rules

          # Count metrics
          $passedRules = $results | Where-Object { $_.level -eq "none" } | Measure-Object | Select-Object -ExpandProperty Count
          $failedRules = $results | Where-Object { $_.level -ne "none" } | Measure-Object | Select-Object -ExpandProperty Count
          $totalRules = $passedRules + $failedRules

          # Set environment variables for later steps
          echo "PASSED_RULES=$passedRules" >> $env:GITHUB_ENV
          echo "FAILED_RULES=$failedRules" >> $env:GITHUB_ENV
          echo "TOTAL_RULES=$totalRules" >> $env:GITHUB_ENV

          # Create job summary markdown
          $summary = @"
          ## PSRule for Azure - Validation Results

          | Metric | Count |
          |--------|-------|
          | ‚úÖ Passed | $passedRules |
          | ‚ùå Failed | $failedRules |
          | üîÑ Total  | $totalRules |

          ### Failed Rules Details

          | Rule ID | Severity | Message | Help Link |
          |---------|----------|---------|-----------|
          "@

          # Add failed rules to the summary
          foreach ($result in ($results | Where-Object { $_.level -ne "none" })) {
            $ruleId = $result.ruleId.Split('/')[-1]
            $rule = $rules | Where-Object { $_.id -eq $ruleId }
            $severity = $result.level
            $message = $result.message.text
            $helpLink = $rule.helpUri

            $summary += "`n| $ruleId | $severity | $message | [Documentation]($helpLink) |"
          }

          if ($failedRules -eq 0) {
            $summary += "`n\n‚úÖ **Congratulations!** All rules passed validation. Your Azure resources follow best practices."
          } else {
            $summary += "`n\n‚ö†Ô∏è **Action Required:** Please review the failed rules and update your templates accordingly."
          }

          # Write to step summary
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8

          Write-Host "Created detailed job summary with PSRule validation results"

      # Optional: Upload results as SARIF - only runs if uploadSarif is true
      - name: Upload SARIF report
        if: ${{ github.event.inputs.uploadSarif == 'true' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/ps-rule-results.sarif
          category: PSRule
        continue-on-error: true

      # Add a summary message about the validation
      - name: Validation Summary
        run: |
          echo "::group::PSRule Analysis Summary"
          echo "üîç PSRule for Azure validation completed"
          echo "‚úÖ Passed: ${{ env.PASSED_RULES }} rules"
          echo "‚ùå Failed: ${{ env.FAILED_RULES }} rules"
          echo "üîÑ Total: ${{ env.TOTAL_RULES }} rules evaluated"

          if [ "${{ env.FAILED_RULES }}" -gt "0" ]; then
            echo "::warning ::${{ env.FAILED_RULES }} rules failed validation. See detailed report for recommendations."
            echo "Failed rules are visible in the job summary and detailed logs above."
          else
            echo "‚úì All rules passed! Your Azure resources follow best practices."
          fi
          echo "::endgroup::"

  deploy:
    name: Deploy Bicep Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    environment:
      name: production
    steps:
      - name: Wait for Approval (5 minutes)
        run: |
          echo "‚è±Ô∏è Waiting for 5 minutes to allow time for manual approval before proceeding..."
          echo "Deployment to PRODUCTION environment will begin at $(date -d '+5 minutes')"
          sleep 300
          echo "‚úÖ Wait period completed. Proceeding with deployment..."

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group if it doesn't exist
        run: |
          az group create \
            --name ${{ github.event.inputs.resourceGroupName || 'revolutionising-devops-rg' }} \
            --location ${{ github.event.inputs.location || 'eastus' }} \
            --output none

      - name: Deploy Bicep template
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ github.event.inputs.resourceGroupName || 'revolutionising-devops-rg' }}
          template: azure-infrastructure.bicep
          parameters: >
            baseName=${{ github.event.inputs.baseName || 'revolutionising-devops' }}
            location=${{ github.event.inputs.location || 'eastus' }}

      - name: Show Deployment Outputs
        run: |
          echo "üöÄ Deployment Completed Successfully!"
          echo ""
          echo "üìù Output Values:"
          echo "App Service URL: ${{ steps.deploy.outputs.appServiceUrl }}"
          echo "Static Web App URL: ${{ steps.deploy.outputs.staticWebAppUrl }}"
          echo "Cosmos DB Account Name: ${{ steps.deploy.outputs.cosmosAccountName }}"
          echo "App Service Name: ${{ steps.deploy.outputs.appServiceName }}"
          echo "Static Web App Name: ${{ steps.deploy.outputs.staticWebAppName }}"
