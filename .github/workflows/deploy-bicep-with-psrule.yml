name: Deploy Bicep with PSRule Validation

on:
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: "Azure Resource Group Name"
        required: true
        default: "ps-rule-rg"
      location:
        description: "Azure Region Location"
        required: true
        default: "australiaeast"
      baseName:
        description: "Base name for resources"
        required: true
        default: "ps-rule"
      staticWebAppLocation:
        description: "Static Web App Location (can be different from main location)"
        required: false
        default: "eastasia"
      appServicePlanSku:
        description: "App Service Plan SKU"
        required: false
        default: "P1V2"

# Update permissions to include security-events write access
permissions:
  id-token: write
  contents: read
  security-events: write # Required for uploading SARIF results

jobs:
  validate:
    name: Validate Bicep with PSRule
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Export Bicep Template for PSRule Analysis
        shell: pwsh
        run: |
          az bicep install
          mkdir -p out/templates
          az bicep build --file azure-infrastructure.bicep --outfile out/templates/azure-infrastructure.json

      # Use PSRule GitHub Action from marketplace with latest version
      - name: Run PSRule for Azure
        uses: microsoft/ps-rule@v2.9.0
        with:
          modules: "PSRule.Rules.Azure"
          inputPath: out/templates/azure-infrastructure.json
          outputFormat: Sarif
          outputPath: reports/ps-rule-results.sarif

      # Upload results as SARIF - fixed with correct permissions
      - name: Upload SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/ps-rule-results.sarif
          category: PSRule

      # Generate a human-readable summary
      - name: Generate PSRule Summary
        shell: pwsh
        run: |
          if (Test-Path -Path reports/ps-rule-results.sarif) {
            $sarifContent = Get-Content -Path reports/ps-rule-results.sarif | ConvertFrom-Json
            $results = $sarifContent.runs[0].results

            $failedRules = $results | Where-Object { $_.level -eq 'error' }
            $warningRules = $results | Where-Object { $_.level -eq 'warning' }

            Write-Host "## PSRule Analysis Summary"
            Write-Host "- Total rules evaluated: $($results.Count)"
            Write-Host "- Errors (Failed rules): $($failedRules.Count)"
            Write-Host "- Warnings: $($warningRules.Count)"

            if ($failedRules.Count -gt 0) {
              Write-Host "`n### Failed Rules:"
              foreach ($rule in $failedRules) {
                Write-Host "- ‚ùå $($rule.ruleId): $($rule.message.text)"
              }
              Write-Host "`nThese failures don't block deployment but represent recommended best practices."
            }

            if ($warningRules.Count -gt 0) {
              Write-Host "`n### Warnings:"
              foreach ($rule in $warningRules) {
                Write-Host "- ‚ö†Ô∏è $($rule.ruleId): $($rule.message.text)"
              }
            }

            if ($failedRules.Count -eq 0 -and $warningRules.Count -eq 0) {
              Write-Host "`n‚úÖ All rules passed successfully!"
            }
          } else {
            Write-Host "‚ö†Ô∏è No SARIF report found."
          }

  deploy:
    name: Deploy Bicep Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    environment:
      name: production
    steps:
      - name: Wait for Approval (5 minutes)
        run: |
          echo "‚è±Ô∏è Waiting for 5 minutes to allow time for manual approval before proceeding..."
          echo "Deployment to PRODUCTION environment will begin at $(date -d '+5 minutes')"
          sleep 300
          echo "‚úÖ Wait period completed. Proceeding with deployment..."

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group if it doesn't exist
        run: |
          az group create \
            --name ${{ github.event.inputs.resourceGroupName || 'revolutionising-devops-rg' }} \
            --location ${{ github.event.inputs.location || 'eastus' }} \
            --output none

      - name: Deploy Bicep template
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ github.event.inputs.resourceGroupName || 'revolutionising-devops-rg' }}
          template: azure-infrastructure.bicep
          parameters: >
            baseName=${{ github.event.inputs.baseName || 'revolutionising-devops' }}
            location=${{ github.event.inputs.location || 'eastus' }}

      - name: Show Deployment Outputs
        run: |
          echo "üöÄ Deployment Completed Successfully!"
          echo ""
          echo "üìù Output Values:"
          echo "App Service URL: ${{ steps.deploy.outputs.appServiceUrl }}"
          echo "Static Web App URL: ${{ steps.deploy.outputs.staticWebAppUrl }}"
          echo "Cosmos DB Account Name: ${{ steps.deploy.outputs.cosmosAccountName }}"
          echo "App Service Name: ${{ steps.deploy.outputs.appServiceName }}"
          echo "Static Web App Name: ${{ steps.deploy.outputs.staticWebAppName }}"
