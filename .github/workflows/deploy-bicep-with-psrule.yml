name: Deploy Bicep with PSRule Validation

on:
  workflow_dispatch:
    inputs:
      resourceGroupName:
        description: "Azure Resource Group Name"
        required: true
        default: "ps-rule-rg"
      location:
        description: "Azure Region Location"
        required: true
        default: "australiaeast"
      baseName:
        description: "Base name for resources"
        required: true
        default: "ps-rule"
      staticWebAppLocation:
        description: "Static Web App Location (can be different from main location)"
        required: false
        default: "eastasia"
      appServicePlanSku:
        description: "App Service Plan SKU"
        required: false
        default: "P1V2"
      uploadSarif:
        description: "Upload SARIF results to GitHub (requires GitHub Advanced Security)"
        type: boolean
        required: false
        default: false

# Reduced permissions if not uploading SARIF results
permissions:
  id-token: write
  contents: read
  # security-events: write # Only needed if uploadSarif is true

jobs:
  validate:
    name: Validate Bicep with PSRule
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Export Bicep Template for PSRule Analysis
        shell: pwsh
        run: |
          az bicep install
          mkdir -p out/templates
          az bicep build --file azure-infrastructure.bicep --outfile out/templates/azure-infrastructure.json

      # Use PSRule GitHub Action from marketplace with latest version
      - name: Run PSRule for Azure
        uses: microsoft/ps-rule@v2.9.0
        with:
          modules: "PSRule.Rules.Azure"
          inputPath: out/templates/azure-infrastructure.json
          outputFormat: Sarif
          outputPath: reports/ps-rule-results.sarif
          outputLogsFormat: Yaml # Added for better console output

      # Optional: Upload results as SARIF - only runs if uploadSarif is true
      - name: Upload SARIF report
        if: ${{ github.event.inputs.uploadSarif == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/ps-rule-results.sarif
          category: PSRule
        continue-on-error: true

      # Generate a comprehensive summary in the logs for all users
      - name: Generate PSRule Summary
        shell: pwsh
        run: |
          if (Test-Path -Path reports/ps-rule-results.sarif) {
            Write-Host "::group::PSRule Analysis Results"

            $sarifContent = Get-Content -Path reports/ps-rule-results.sarif | ConvertFrom-Json
            $results = $sarifContent.runs[0].results

            $failedRules = $results | Where-Object { $_.level -eq 'error' }
            $warningRules = $results | Where-Object { $_.level -eq 'warning' }
            $passedRules = $results | Where-Object { $_.level -eq 'none' -or $_.level -eq 'note' }

            Write-Host "üìä PSRule for Azure Analysis Summary"
            Write-Host "====================================="
            Write-Host "‚úÖ Passed: $($passedRules.Count)"
            Write-Host "‚ö†Ô∏è Warnings: $($warningRules.Count)"
            Write-Host "‚ùå Failed: $($failedRules.Count)"
            Write-Host "Total Rules Evaluated: $($results.Count)"

            if ($failedRules.Count -gt 0) {
              Write-Host "`n‚ùå Failed Rules - Recommendations:" -ForegroundColor Red
              Write-Host "----------------------------------------"

              $uniqueFailedRules = $failedRules | Group-Object -Property ruleId

              foreach ($rule in $uniqueFailedRules) {
                $ruleInstance = $rule.Group[0]
                $affectedResources = $rule.Group | ForEach-Object { $_.message.text.Split("'")[1] }

                Write-Host "Rule: $($ruleInstance.ruleId)" -ForegroundColor Yellow
                Write-Host "Description: $($ruleInstance.message.text)"
                Write-Host "Affected Resources: $([string]::Join(", ", $affectedResources))"
                Write-Host "----------------------------------------"
              }
            }

            if ($warningRules.Count -gt 0) {
              Write-Host "`n‚ö†Ô∏è Warnings:" -ForegroundColor Yellow
              Write-Host "----------------------------------------"

              $uniqueWarningRules = $warningRules | Group-Object -Property ruleId

              foreach ($rule in $uniqueWarningRules) {
                $ruleInstance = $rule.Group[0]
                Write-Host "Rule: $($ruleInstance.ruleId)"
                Write-Host "Description: $($ruleInstance.message.text)"
                Write-Host "----------------------------------------"
              }
            }

            # Store the number of failed rules as an output variable
            if ($failedRules.Count -gt 0) {
              Write-Host "::warning::$($failedRules.Count) Azure Best Practice rules failed. Review recommendations above."
              echo "FAILED_RULES_COUNT=$($failedRules.Count)" >> $GITHUB_ENV
            } else {
              echo "FAILED_RULES_COUNT=0" >> $GITHUB_ENV
            }

            Write-Host "::endgroup::"

            # Create a markdown summary for GitHub workflow
            Write-Output "## üìä PSRule for Azure - Template Analysis Results" >> $GITHUB_STEP_SUMMARY
            Write-Output "" >> $GITHUB_STEP_SUMMARY
            Write-Output "| Category | Count |" >> $GITHUB_STEP_SUMMARY
            Write-Output "| --- | --- |" >> $GITHUB_STEP_SUMMARY
            Write-Output "| ‚úÖ Passed | $($passedRules.Count) |" >> $GITHUB_STEP_SUMMARY
            Write-Output "| ‚ö†Ô∏è Warnings | $($warningRules.Count) |" >> $GITHUB_STEP_SUMMARY
            Write-Output "| ‚ùå Failed | $($failedRules.Count) |" >> $GITHUB_STEP_SUMMARY
            Write-Output "" >> $GITHUB_STEP_SUMMARY

            if ($failedRules.Count -gt 0) {
              Write-Output "### Failed Rules" >> $GITHUB_STEP_SUMMARY
              Write-Output "" >> $GITHUB_STEP_SUMMARY
              Write-Output "| Rule | Description |" >> $GITHUB_STEP_SUMMARY
              Write-Output "| --- | --- |" >> $GITHUB_STEP_SUMMARY

              foreach ($rule in $uniqueFailedRules) {
                $ruleInstance = $rule.Group[0]
                Write-Output "| $($ruleInstance.ruleId) | $($ruleInstance.message.text) |" >> $GITHUB_STEP_SUMMARY
              }
            }

          } else {
            Write-Host "‚ö†Ô∏è No SARIF report found."
            echo "FAILED_RULES_COUNT=0" >> $GITHUB_ENV
          }

  deploy:
    name: Deploy Bicep Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    environment:
      name: production
    steps:
      - name: Wait for Approval (5 minutes)
        run: |
          echo "‚è±Ô∏è Waiting for 5 minutes to allow time for manual approval before proceeding..."
          echo "Deployment to PRODUCTION environment will begin at $(date -d '+5 minutes')"
          sleep 300
          echo "‚úÖ Wait period completed. Proceeding with deployment..."

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create Resource Group if it doesn't exist
        run: |
          az group create \
            --name ${{ github.event.inputs.resourceGroupName || 'revolutionising-devops-rg' }} \
            --location ${{ github.event.inputs.location || 'eastus' }} \
            --output none

      - name: Deploy Bicep template
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ github.event.inputs.resourceGroupName || 'revolutionising-devops-rg' }}
          template: azure-infrastructure.bicep
          parameters: >
            baseName=${{ github.event.inputs.baseName || 'revolutionising-devops' }}
            location=${{ github.event.inputs.location || 'eastus' }}

      - name: Show Deployment Outputs
        run: |
          echo "üöÄ Deployment Completed Successfully!"
          echo ""
          echo "üìù Output Values:"
          echo "App Service URL: ${{ steps.deploy.outputs.appServiceUrl }}"
          echo "Static Web App URL: ${{ steps.deploy.outputs.staticWebAppUrl }}"
          echo "Cosmos DB Account Name: ${{ steps.deploy.outputs.cosmosAccountName }}"
          echo "App Service Name: ${{ steps.deploy.outputs.appServiceName }}"
          echo "Static Web App Name: ${{ steps.deploy.outputs.staticWebAppName }}"
